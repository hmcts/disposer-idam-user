#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "disposer"
def component = "idam-user"
def branchesToSync = ['demo','perftest','ithc']

GradleBuilder builder = new GradleBuilder(this, product)

def secrets = [
        'disposer-${env}': [
                secret('app-insights-connection-string', 'app-insights-connection-string'),
                secret('idam-client-secret', 'DISPOSER_IDAM_USER_CLIENT_SECRET'),
                secret('s2s-secret-disposer-idam-user', 'S2S_SECRET_DISPOSER_IDAM_USER'),
                secret('idam-citizen-disposer-system-user-username', 'IDAM_CLIENT_USERNAME'),
                secret('idam-citizen-disposer-system-user-password', 'IDAM_CLIENT_PASSWORD')
        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}


withPipeline(type, product, component) {
  // Set required environment variables to run functional tests apart from one in vaults.
  env.S2S_URL = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
  env.IDAM_API_URL = 'https://idam-api.aat.platform.hmcts.net'
  env.ROLE_ASSIGNMENT_HOST = 'http://am-role-assignment-service-aat.service.core-compute-aat.internal'


  enableAksStagingDeployment()
  disableLegacyDeployment()
  nonServiceApp()
  syncBranchesWithMaster(branchesToSync)
  enableSlackNotifications('#disposer-builds')
  loadVaultSecrets(secrets)
  //enableFortifyScan()

  afterAlways('test') {
    junit 'build/test-results/test/**/*.xml'
    archiveArtifacts 'build/reports/tests/test/index.html'

    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/test",
            reportFiles          : "index.html",
            reportName           : "disposer-idam-user Test Report"
    ]

    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/jacoco",
            reportFiles          : "index.html",
            reportName           : "disposer-idam-user Code Coverage Report"
    ]
  }


    afterAlways('functionalTest:preview') {
      junit 'build/test-results/functional/**/*.xml'
      archiveArtifacts 'build/reports/tests/functional/index.html'

      publishHTML target: [
              allowMissing         : true,
              alwaysLinkToLastBuild: true,
              keepAll              : true,
              reportDir            : "build/reports/tests/functional",
              reportFiles          : "index.html",
              reportName           : "disposer-idam-user Functional Test Report"
      ]
    }

    afterAlways('functionalTest:aat') {
      junit 'build/test-results/functional/**/*.xml'
      archiveArtifacts 'build/reports/tests/functional/index.html'

      publishHTML target: [
              allowMissing         : true,
              alwaysLinkToLastBuild: true,
              keepAll              : true,
              reportDir            : "build/reports/tests/functional",
              reportFiles          : "index.html",
              reportName           : "disposer-idam-user Functional Test Report"
      ]
    }

    afterAlways('akschartsinstall') {
      // Set required environment variables to run functional tests apart from one in vaults.
      env.S2S_URL = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
      env.IDAM_API_URL = 'https://idam-api.aat.platform.hmcts.net'
      env.ROLE_ASSIGNMENT_HOST = 'http://am-role-assignment-service-aat.service.core-compute-aat.internal'

      echo "Just waiting a while to ensure that the pod has run the job"
      sh "sleep 120s"

      // Execute functional tests
      echo "Verifying that functional test data was processed correctly"
      try {
        builder.gradle('functional')
      } finally {
        junit '**/test-results/**/*.xml'
      }
    }
  }
