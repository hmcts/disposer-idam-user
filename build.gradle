plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'idea'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.4.4'
  id 'org.owasp.dependencycheck' version '12.1.0'
  id 'io.freefair.lombok' version '8.13.1'
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'org.sonarqube' version '6.1.0.5360'
  id 'info.solidsoft.pitest' version '1.15.0'
}

pitest {
  junit5PluginVersion.set('1.2.1')
  targetClasses = ['uk.gov.hmcts.reform.idam.*']
  threads = 10
  enableDefaultIncrementalAnalysis = true
  outputFormats = ['XML', 'HTML']
  timestampedReports = true
  mutationThreshold = 50
  timeoutConstInMillis = 30000
  mutators.set([
    'CONDITIONALS_BOUNDARY',
    'INCREMENTS',
    'INVERT_NEGS',
    'MATH',
    'NEGATE_CONDITIONALS',
    'VOID_METHOD_CALLS',
    'EMPTY_RETURNS',
    'FALSE_RETURNS',
    'NULL_RETURNS',
    'PRIMITIVE_RETURNS',
    'TRUE_RETURNS',
    'REMOVE_CONDITIONALS'
  ])
}

project.tasks['pitest'].group = "Verification"

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

idea {
  module {
    testSources.from(project.sourceSets.integrationTest.java.srcDirs)
    testSources.from(project.sourceSets.functionalTest.java.srcDirs)
    testSources.from(project.sourceSets.smokeTest.java.srcDirs)
    testResources.from(project.sourceSets.integrationTest.resources.srcDirs)
    testResources.from(project.sourceSets.functionalTest.resources.srcDirs)
    testResources.from(project.sourceSets.smokeTest.resources.srcDirs)
  }
}

configurations {
  cucumberRuntime {
    extendsFrom testImplementation
  }
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntime.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntime.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntime.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

test {
  useJUnitPlatform()
  failFast = true
  jvmArgs("-XX:+EnableDynamicAgentLoading")
}

task functional(type: Test) {
  useJUnitPlatform()
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
  mustRunAfter test
}

check.dependsOn integration

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

task fortifyScan(type: JavaExec)  {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.22.0'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "7.11.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

project.tasks['jacocoTestReport'].dependsOn test, integration

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
    xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonar {
  properties {
    property "sonar.projectName", "Reform :: disposer-idam-user"
    property "sonar.projectKey", "uk.gov.hmcts.reform:disposer-idam-user"
    property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    property "sonar.coverage.exclusions", "**/idam/Application.java"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    property "sonar.sources", "src/main/java"
    property "sonar.tests", "src/test/java,src/smokeTest/java,src/functionalTest/java,src/integrationTest/java"
  }
}


// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

dependencyManagement {
  dependencies {
    dependencySet(group: 'ch.qos.logback', version: '1.5.18') {
      entry 'logback-core'
      entry 'logback-classic'
    }
  }
  imports {
    mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2024.0.1'
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url = 'https://jitpack.io' }
}

ext['snakeyaml.version'] = '2.0'

def versions = [
  aspectj           : '1.9.23',
  cucumber          : '7.21.1',
  gradlePitest      : '1.15.0',
  jackson           : '2.18.3',
  jersey            : '3.1.6',
  junit             : '5.10.0',
  lombok            : '1.18.36'
]

ext['jackson-bom.version'] = versions.jackson

dependencies {

  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: versions.jackson
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson
  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.8'
  implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '3.0.3'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.3.0'
  implementation group: 'com.microsoft.azure', name: 'applicationinsights-web', version: '3.7.1'
  implementation group: 'io.rest-assured', name: 'rest-assured', version: '5.5.1'
  implementation group: 'org.aspectj', name: 'aspectjweaver', version: versions.aspectj
  implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.2.1'

  runtimeOnly group: 'org.aspectj', name: 'aspectjrt', version: versions.aspectj

  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.8', classifier: 'all'
  testImplementation group: 'com.google.code.gson', name: 'gson', version: '2.12.1'
  testImplementation group: 'io.cucumber', name: 'cucumber-java', version: versions.cucumber
  testImplementation group: 'io.cucumber', name: 'cucumber-junit', version: versions.cucumber
  testImplementation group: 'io.cucumber', name: 'cucumber-spring', version: versions.cucumber
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testImplementation group: 'org.wiremock', name: 'wiremock-standalone', version: '3.12.1'

  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  integrationTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  functionalTestImplementation group: 'jakarta.inject', name: 'jakarta.inject-api', version: '2.0.1'
  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath
}

application {
  mainClass = 'uk.gov.hmcts.reform.idam.Application'
}


bootJar {
  archiveFileName = "disposer-idam-user.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}
